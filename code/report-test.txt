============================= test session starts =============================
platform win32 -- Python 2.7.10, pytest-3.0.5, py-1.4.31, pluggy-0.4.0
rootdir: C:\Users\Vanderlei\Desktop, inifile: 
collected 226 items

. ..................................F................F..............................................................................................................................................................................

================================== FAILURES ===================================
_______________________________ test_check_hash _______________________________

    def test_check_hash():
        "Make sure check_hash works for the Surfer test data"
        fname = os.path.join(TEST_DATA_DIR, 'simple_surfer.grd')
        # Hashes gotten from openssl
        sha256 = "9cbdae1c020797231ff45a18594f80c68c3147d0b976103767a0c2c333b07ff6"
>       check_hash(fname, sha256, hash_type='sha256')

..\Documents\fatiando\fatiando\datasets\tests\test_utils.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

fname = 'C:\\Users\\Vanderlei\\Documents\\fatiando\\fatiando\\datasets\\tests\\data\\simple_surfer.grd'
known_hash = '9cbdae1c020797231ff45a18594f80c68c3147d0b976103767a0c2c333b07ff6'
hash_type = 'sha256'

    def check_hash(fname, known_hash, hash_type='sha256'):
        """
        Assert that the hash of a file is equal to a known hash.
    
        Useful for checking if a file has changed or been corrupted.
    
        Parameters:
    
        * fname : string
            The name of the file.
        * known_hash : string
            The known (recorded) hash of the file.
        * hash_type : string
            What kind of hash is it. Can be anything defined in Python's hashlib.
    
        Raises:
    
        * ``AssertionError`` if the hash is different from the known hash.
    
        """
        # Calculate the hash in chunks to avoid overloading the memory
        chunksize = 65536
        hasher = getattr(hashlib, hash_type)()
        with open(fname, 'rb') as f:
            buf = f.read(chunksize)
            while len(buf) > 0:
                hasher.update(buf)
                buf = f.read(chunksize)
        file_hash = hasher.hexdigest()
        msg = '\n'.join([
            'Possibly corrupted file {}.'.format(fname),
            '  - Calculated {} hash: {}'.format(hash_type, file_hash),
            '  - Known (recorded) hash: {}'.format(known_hash)])
>       assert file_hash == known_hash, msg
E       AssertionError: Possibly corrupted file C:\Users\Vanderlei\Documents\fatiando\fatiando\datasets\tests\data\simple_surfer.grd.
E         - Calculated sha256 hash: 75dc8dcbbb54ac83fa9e7893a43a85e2787f53088d720cc18d93dc6291940145
E         - Known (recorded) hash: 9cbdae1c020797231ff45a18594f80c68c3147d0b976103767a0c2c333b07ff6

..\Documents\fatiando\fatiando\datasets\utils.py:40: AssertionError
_____________________________ test_pel_polereduce _____________________________

    def test_pel_polereduce():
        "PELTotalField can reduce data to the pole"
        # Use remanent magnetization
        sinc, sdec = -80, 5
        model = [Prism(-100, 100, -500, 500, 0, 100,
                       {'magnetization': utils.ang2vec(5, sinc, sdec)})]
        inc, dec = -83, 5
        shape = (40, 40)
        area = [-2000, 2000, -2000, 2000]
        x, y, z = gridder.regular(area, shape, z=-100)
        data = prism.tf(x, y, z, model, inc, dec)
        true = prism.tf(x, y, z, model, -90, 0, pmag=utils.ang2vec(5, -90, 0))
    
        layer = PointGrid(area, 100, shape)
        windows = (20, 20)
        degree = 3
        pel = PELTotalField(x, y, z, data, inc, dec, layer, windows, degree,
                            sinc, sdec)
        eql = pel + 1e-22*PELSmoothness(layer, windows, degree)
        eql.fit()
    
>       assert_allclose(eql[0].predicted(), data, rtol=0.05)

..\Documents\fatiando\fatiando\gravmag\tests\test_eqlayer.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Anaconda2\lib\site-packages\numpy\testing\utils.py:1297: in assert_allclose
    verbose=verbose, header=header)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

comparison = <function compare at 0x00000000045B2668>
x = array([-0.44472849, -0.47408429, -0.54273617, ..., -0.4752537 ,
       -0.44272002, -0.41213226])
y = array([-0.4453066 , -0.48019526, -0.51755744, ..., -0.47525784,
       -0.44271744, -0.41213354])
err_msg = '', verbose = True
header = 'Not equal to tolerance rtol=0.05, atol=0', precision = 6

    def assert_array_compare(comparison, x, y, err_msg='', verbose=True,
                             header='', precision=6):
        from numpy.core import array, isnan, isinf, any, all, inf
        x = array(x, copy=False, subok=True)
        y = array(y, copy=False, subok=True)
    
        def isnumber(x):
            return x.dtype.char in '?bhilqpBHILQPefdgFDG'
    
        def chk_same_position(x_id, y_id, hasval='nan'):
            """Handling nan/inf: check that x and y have the nan/inf at the same
            locations."""
            try:
                assert_array_equal(x_id, y_id)
            except AssertionError:
                msg = build_err_msg([x, y],
                                    err_msg + '\nx and y %s location mismatch:' \
                                    % (hasval), verbose=verbose, header=header,
                                    names=('x', 'y'), precision=precision)
                raise AssertionError(msg)
    
        try:
            cond = (x.shape==() or y.shape==()) or x.shape == y.shape
            if not cond:
                msg = build_err_msg([x, y],
                                    err_msg
                                    + '\n(shapes %s, %s mismatch)' % (x.shape,
                                                                      y.shape),
                                    verbose=verbose, header=header,
                                    names=('x', 'y'), precision=precision)
                if not cond :
                    raise AssertionError(msg)
    
            if isnumber(x) and isnumber(y):
                x_isnan, y_isnan = isnan(x), isnan(y)
                x_isinf, y_isinf = isinf(x), isinf(y)
    
                # Validate that the special values are in the same place
                if any(x_isnan) or any(y_isnan):
                    chk_same_position(x_isnan, y_isnan, hasval='nan')
                if any(x_isinf) or any(y_isinf):
                    # Check +inf and -inf separately, since they are different
                    chk_same_position(x == +inf, y == +inf, hasval='+inf')
                    chk_same_position(x == -inf, y == -inf, hasval='-inf')
    
                # Combine all the special values
                x_id, y_id = x_isnan, y_isnan
                x_id |= x_isinf
                y_id |= y_isinf
    
                # Only do the comparison if actual values are left
                if all(x_id):
                    return
    
                if any(x_id):
                    val = comparison(x[~x_id], y[~y_id])
                else:
                    val = comparison(x, y)
            else:
                val = comparison(x, y)
    
            if isinstance(val, bool):
                cond = val
                reduced = [0]
            else:
                reduced = val.ravel()
                cond = reduced.all()
                reduced = reduced.tolist()
            if not cond:
                match = 100-100.0*reduced.count(1)/len(reduced)
                msg = build_err_msg([x, y],
                                    err_msg
                                    + '\n(mismatch %s%%)' % (match,),
                                    verbose=verbose, header=header,
                                    names=('x', 'y'), precision=precision)
                if not cond :
>                   raise AssertionError(msg)
E                   AssertionError: 
E                   Not equal to tolerance rtol=0.05, atol=0
E                   
E                   (mismatch 100.0%)
E                    x: array([-0.444728, -0.474084, -0.542736, ..., -0.475254, -0.44272 ,
E                          -0.412132])
E                    y: array([-0.445307, -0.480195, -0.517557, ..., -0.475258, -0.442717,
E                          -0.412134])

C:\Anaconda2\lib\site-packages\numpy\testing\utils.py:665: AssertionError
=================== 2 failed, 224 passed in 119.58 seconds ====================
